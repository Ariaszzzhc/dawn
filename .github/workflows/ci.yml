name: build dawn as static lib

on:
  workflow_dispatch:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  WIN10_SDK_VERSION: 26100
  MACOSX_DEPLOYMENT_TARGET: "11.0"

jobs:
  cmake:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]

    name: CMake-${{ matrix.os }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Windows SDK
        if: matrix.os == 'windows-latest'
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
        with:
          sdk-version: ${{ env.WIN10_SDK_VERSION }}

      - name: Setup MSVC Developer Command Prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up dependencies on linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            python3 \
            ninja-build \
            python3-pip \
            libx11-dev \
            libxi-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            mesa-common-dev \
            libx11-xcb-dev \
            pkg-config \
            nodejs \
            npm \
            clang-19 \
            lld-19

      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: >
          cmake
          -S .
          -B out/${{ matrix.build_type }}
          -G Ninja
          -DDAWN_FETCH_DEPENDENCIES=ON
          -DDAWN_BUILD_SAMPLES=OFF
          -DDAWN_BUILD_TESTS=OFF
          -DDAWN_BUILD_NODE_BINDINGS=OFF
          -DDAWN_BUILD_BENCHMARKS=OFF
          -DTINT_BUILD_TESTS=OFF
          -DTINT_BUILD_BENCHMARKS=OFF
          -DDAWN_SUPPORTS_GLFW_FOR_WINDOWING=OFF
          -DTINT_BUILD_CMD_TOOLS=OFF
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/bin
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_CXX_COMPILER=clang++-19
          -DCMAKE_C_COMPILER=clang-19
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: >
          cmake
          -S .
          -B out/${{ matrix.build_type }}
          -G Ninja
          -DDAWN_FETCH_DEPENDENCIES=ON
          -DDAWN_BUILD_SAMPLES=OFF
          -DDAWN_BUILD_TESTS=OFF
          -DDAWN_BUILD_NODE_BINDINGS=OFF
          -DDAWN_BUILD_BENCHMARKS=OFF
          -DTINT_BUILD_TESTS=OFF
          -DTINT_BUILD_BENCHMARKS=OFF
          -DDAWN_SUPPORTS_GLFW_FOR_WINDOWING=OFF
          -DTINT_BUILD_CMD_TOOLS=OFF
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/bin
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_CXX_COMPILER=cl
          -DCMAKE_C_COMPILER=cl
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake (Macos)
        if: matrix.os == 'macos-latest'
        run: >
          cmake
          -S .
          -B out/${{ matrix.build_type }}
          -G Ninja
          -DDAWN_FETCH_DEPENDENCIES=ON
          -DDAWN_BUILD_SAMPLES=OFF
          -DDAWN_BUILD_TESTS=OFF
          -DDAWN_BUILD_NODE_BINDINGS=OFF
          -DDAWN_BUILD_BENCHMARKS=OFF
          -DTINT_BUILD_TESTS=OFF
          -DTINT_BUILD_BENCHMARKS=OFF
          -DDAWN_SUPPORTS_GLFW_FOR_WINDOWING=OFF
          -DTINT_BUILD_CMD_TOOLS=OFF
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/bin
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${{ github.workspace }}/out/${{ matrix.build_type }}/lib
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        run: cmake --build out/${{ matrix.build_type }} --config ${{ matrix.build_type }} --parallel

      - name: Package
        run: |
          mkdir -p ${{ github.workspace }}/out/${{ matrix.build_type }}/install/include
          mkdir -p ${{ github.workspace }}/out/${{ matrix.build_type }}/install/lib
          cp -r ${{ github.workspace }}/include/dawn/ ${{ github.workspace }}/out/${{ matrix.build_type }}/install/include/dawn
          cp -r ${{ github.workspace }}/include/webgpu/ ${{ github.workspace }}/out/${{ matrix.build_type }}/install/include/webgpu
          cp -r ${{ github.workspace }}/out/${{ matrix.build_type }}/gen/include/dawn/ ${{ github.workspace }}/out/${{ matrix.build_type }}/install/include/dawn
          cp -r ${{ github.workspace }}/out/${{ matrix.build_type }}/gen/include/webgpu/ ${{ github.workspace }}/out/${{ matrix.build_type }}/install/include/webgpu
          cp ${{ github.workspace }}/out/${{ matrix.build_type }}/lib/${{ matrix.os == 'windows-latest' && 'webgpu_dawn.lib' || 'libwebgpu_dawn.a' }} ${{ github.workspace }}/out/${{ matrix.build_type }}/install/lib/${{ matrix.os == 'windows-latest' && 'webgpu_dawn.lib' || 'libwebgpu_dawn.a' }}
          cd ${{ github.workspace }}/out/${{ matrix.build_type }}/install && cmake -E tar cvf ../../../webgpu_dawn-${{ github.event_name == 'release' && github.event.action == 'published' && github.event.release.name || github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}.zip .

      - name: Upload artifacts
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: webgpu_dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}
          path: webgpu_dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}.zip

      - name: Upload Release Asset
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: webgpu_dawn-${{ github.event.release.name }}-${{ matrix.os }}-${{ matrix.build_type }}.zip
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
